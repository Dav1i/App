import 'package:flutter/material.dart';

void main() => runApp(const FlashcardApp());

class FlashcardApp extends StatelessWidget {
  const FlashcardApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flashcards de Verbos',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const FlashcardHomePage(),
      debugShowCheckedModeBanner: false, // Remove the debug banner
    );
  }
}

class Flashcard {
  final String tempo;
  final String frase;
  final String imagemUrl;
  final IconData icone;

  Flashcard({
    required this.tempo,
    required this.frase,
    required this.imagemUrl,
    required this.icone,
  });
}

class FlashcardHomePage extends StatefulWidget {
  const FlashcardHomePage({super.key});

  @override
  _FlashcardHomePageState createState() => _FlashcardHomePageState();
}

class _FlashcardHomePageState extends State<FlashcardHomePage> {
  late List<bool> memorizados;

  final List<Flashcard> flashcards = <Flashcard>[
    Flashcard(
      tempo: 'Passado',
      frase: 'She **walked** to school yesterday.',
      imagemUrl: 'https://cdn.pixabay.com/photo/2016/11/29/03/53/walking-1867693_1280.jpg',
      icone: Icons.history,
    ),
    Flashcard(
      tempo: 'Presente',
      frase: 'He **runs** every morning.',
      imagemUrl: 'https://cdn.pixabay.com/photo/2016/11/29/05/08/adult-1867483_1280.jpg',
      icone: Icons.wb_sunny,
    ),
    Flashcard(
      tempo: 'Futuro',
      frase: 'They **will travel** next month.',
      imagemUrl: 'https://cdn.pixabay.com/photo/2017/03/28/12/10/airplane-2182160_1280.jpg',
      icone: Icons.event,
    ),
  ];

  @override
  void initState() {
    super.initState();
    memorizados = List<bool>.filled(flashcards.length, false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Flashcards de Verbos em Inglês'),
      ),
      body: ListView.separated(
        itemCount: flashcards.length,
        separatorBuilder: (BuildContext context, int index) => const Divider(thickness: 2),
        itemBuilder: (BuildContext context, int index) {
          final Flashcard card = flashcards[index];
          return Card(
            margin: const EdgeInsets.all(12),
            elevation: 4,
            child: Padding(
              padding: const EdgeInsets.all(12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: <Widget>[
                  Row(
                    children: <Widget>[
                      Icon(card.icone, color: Colors.blue),
                      const SizedBox(width: 8),
                      Text(
                        card.tempo,
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 10),
                  Text(
                    card.frase,
                    style: const TextStyle(fontSize: 16),
                  ),
                  const SizedBox(height: 10),
                  // Using ConstrainedBox to prevent potential image overflow on smaller screens
                  ConstrainedBox(
                    constraints: BoxConstraints(
                      maxWidth: MediaQuery.of(context).size.width - 48, // Card padding + margin
                      maxHeight: 200, // Limit image height
                    ),
                    child: Image.network(
                      card.imagemUrl,
                      fit: BoxFit.cover,
                      errorBuilder: (BuildContext context, Object error, StackTrace? stackTrace) =>
                          const Center(child: Icon(Icons.broken_image, size: 48)),
                    ),
                  ),
                  const SizedBox(height: 10),
                  ElevatedButton.icon(
                    onPressed: () {
                      setState(() {
                        memorizados[index] = true;
                      });
                    },
                    icon: const Icon(Icons.check),
                    label: Text(
                      memorizados[index] ? 'Memorizado ✔️' : 'Memorizado',
                    ),
                    style: ElevatedButton.styleFrom(
                      // Provide a non-null color to prevent potential issues with implicit null handling
                      backgroundColor: memorizados[index] ? Colors.green : Theme.of(context).colorScheme.primary,
                      foregroundColor: memorizados[index] ? Colors.white : Theme.of(context).colorScheme.onPrimary,
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}